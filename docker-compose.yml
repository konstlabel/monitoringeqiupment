version: "3.8"

services:
  # MySQL Database Service
  db:
    build:
      context: .                             # Контекст сборки
      dockerfile: mysql.Dockerfile           # Указываем Dockerfile
    container_name: monitoring-db            # Восстановлено для удобства
    restart: always
    command: --host_cache_size=0
    environment:
      MYSQL_ROOT_PASSWORD: Z_H9z*941Q7h/5i6W1A]_$p^*&[c-$Kv
      MYSQL_DATABASE: monitoringequipment
      MYSQL_USER: konstlabel
      MYSQL_PASSWORD: Z_H9z*941Q7h/5i6W1A]_$p^*&[c-$Kv
      TZ: Europe/Moscow
    volumes:
      - db_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  # Spring Boot Application Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: monitoring-app:latest
    container_name: monitoring-app
    restart: always
    depends_on:
      db:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/monitoringequipment?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: konstlabel
      SPRING_DATASOURCE_PASSWORD: Z_H9z*941Q7h/5i6W1A]_$p^*&[c-$Kv
      SPRING_JPA_OPEN_IN_VIEW: "false"  # Преобразовано в строку
      SERVER_PORT: 53828
      ADMIN_USERNAME: admin
      ADMIN_PASSWORD: secure_admin_password_123!  # Используйте безопасный пароль
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1024M
    networks:
      - backend
    ports:
      - "53828:53828"

  # NGINX Reverse Proxy Service
  nginx:
    image: nginx:stable-alpine
    container_name: monitoring-nginx
    restart: always
    depends_on:
      - app
    ports:
      - "8080:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf  # Убрано :ro
    networks:
      - backend

volumes:
  db_data:

networks:
  backend: